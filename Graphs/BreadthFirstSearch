/*package Module4;

import java.util.*;

public class BreadthFirstSearch {
    // Breadth First Search algorithm implementation for flight routes
    public static boolean breadthFirstSearch(String startAirport, String endAirport, Map<String, List<FlightRoute>> routes) {
        // Initialize a queue for BFS
        Queue<String> queue = new LinkedList<>();

        // Initialize a set to keep track of visited airports
        Set<String> visited = new HashSet<>();
        
        Map<String, String> path = new HashMap<>();


        // Set found to false
        boolean found = false;

        // Clear all marks
        visited.clear();

        // Mark the startAirport
        visited.add(startAirport);
        path.put(startAirport, null);

        // Enqueue the startAirport into the queue
        queue.add(startAirport);
        System.out.println("Starting BFS from " + startAirport+ " to " + endAirport);

        // Perform BFS
        double totalCost = 0;
        while (!queue.isEmpty() && !found) {
            // Dequeue an airport
            String currentAirport = queue.poll();
            System.out.println("Visiting airport: " + currentAirport);

            // If current airport equals endAirport, set found to true
            if (currentAirport.equals(endAirport)) {
                found = true;
                System.out.println("End airport " + endAirport + " found!");
            } else {
                // Iterate through adjacent airports (destinations)
                List<FlightRoute> flightRoutes = routes.getOrDefault(currentAirport, Collections.emptyList());
                for (FlightRoute route : flightRoutes) {
                    String nextAirport = route.getDestination();
                    // If adjacent airport is not visited
                    if (!visited.contains(nextAirport)) {
                        // Mark the adjacent airport, add it into the queue
                        visited.add(nextAirport);
                        queue.add(nextAirport);
                        
                        System.out.println("Adding airport " + nextAirport + " to the queue.");
                        totalCost += route.getCost();
                    } else {
                        System.out.println("Airport " + nextAirport + " is already visited.");
                    }
                }
            }
        }
        
        if (!found) {
            //System.out.println("No path exists from " + startAirport + " to " + endAirport);
            return false;
        }
        
        // Display total cost of the trip
        System.out.println("Total Cost of Trip: $" + totalCost);
        return true;
    }
   
    
 //  method to retrieve the destination airport of a flight route
    private static String getDestinationAirport(FlightRoute route) {
        return route.getDestination();
    }

    //  method to mark an airport as visited
    private static void markAirportAsVisited(String airport, Set<String> visited) {
        visited.add(airport);
    }

    //  method to check if an airport is marked as visited
    private static boolean isAirportVisited(String airport, Set<String> visited) {
        return visited.contains(airport);
    }
    
}


